Q_level3 = numeric(0)
Q_level3
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/.active-rstudio-document')
as.data.frame(4)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
chod = as.data.frame(4)
rownames(chod) = "chod"
chod
colnames(chod) = "boner"
chod
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
result1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
result11
result1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
result1
result2
result3
probs_level2 = prob(2, dt, alpha, dx, sigma)
probs_level2
prob <- function(j, delta_t, alpha, delta_x, vol){
i=0
pu =  c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 - (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pd = c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 + (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pm = 1 - pu - pd
prob = list(pu = pu,pm = pm,pd = pd)
return(prob)
}
probs_level2 = prob(2, dt, alpha, dx, sigma)
probs_level2$pd
Q_level3 = numeric(0, length = nbNodes)
#according to "State prices continued" slide
Q_level3 = numeric(length = nbNodes)
#according to "State prices continued" slide
Q_level3[0] = Q_level2[1]*probs_level2$pd*df
Q_level3[nbNodes] = Q_level3[0]
Q_level3
Q_level3 = numeric(length = nbNodes)
#according to "State prices continued" slide
Q_level3[1] = Q_level2[1]*probs_level2$pd*df
Q_level3[nbNodes] = Q_level3[1]
Q_level3
Q2
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
Q_2
Q_3[2] = Q_2[1]*probs_level2$pm*df + Q[2]*probs_level2$pd*df
Q_3[2] = Q_2[1]*probs_level2$pm*df + Q_2[2]*probs_level2$pd*df
df = exp(-r*dt)
probs_level2 = prob(2, dt, alpha, dx, sigma)
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_level3: will have 7 nodes.
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
Q_3[1] = Q_2[1]*probs_level2$pd*df
Q_3[nbNodes] = Q_3[1]
Q_3[2] = Q_2[1]*probs_level2$pm*df + Q_2[2]*probs_level2$pd*df
Q_3
for(jj in 3:5){print(jj)}
Q_3[2] = Q_2[1]*probs_level2$pm*df + Q_2[2]*probs_level2$pd*df
Q_3[nbNodes-1] = Q_3[2]
#fill in rest of level 3 state prices... ones that have 3 paths to each Q_i,j
for(jj in 3:5){
Q_3[jj] = Q_2[jj-2]*probs_level2$pu*df + Q_2[jj-1]*probs_level2$pm*df +
Q_2[jj]*probs_level2$pd*df
}
Q_3
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_level3: will have 7 nodes.
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
Q_3[1] = Q_2[1]*probs_level2$pd*df
Q_3[nbNodes] = Q_3[1]
Q_3[2] = Q_2[1]*probs_level2$pm*df + Q_2[2]*probs_level2$pd*df
Q_3[nbNodes-1] = Q_3[2]
Q_3
Q_3[1] = Q_2[1]*probs_level2$pd*df
Q_3[1]
df
df*0.252*0.1401
probs_level2$pu
dx
dt
sigma
alpha
probs_level2
prob <- function(j, delta_t, alpha, delta_x, vol){
i=0
pu =  c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 - (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pd = c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 + (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
prob <- function(i,j, delta_t, alpha, delta_x, vol){
pu =  c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 - (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pd = c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 + (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
probs_level3
prob <- function(x, dt, alpha, dx, vol){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*delta_t^2)/dx^2) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*delta_t^2)/dx^2) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
level_x
level_x2 = dx*seq(from = -2, to = 2, by = 1)
level_x2
prob(level_x2[1], dt, alpha, dx, sigma)
prob <- function(x, dt, alpha, dx, vol){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
prob(level_x2[1], dt, alpha, dx, sigma)
prob(level_x2[2], dt, alpha, dx, sigma)
prob(level_x2[3], dt, alpha, dx, sigma)
prob(level_x2[4], dt, alpha, dx, sigma)
prob(level_x2[5], dt, alpha, dx, sigma)
##### Problem 4: 3-level (indexing at 0) trinomial tree solution #####
#What do we need to fill out the 3rd level of the tree?
# simplified tree price levels
# Option values (i.e. discounted expected value of option values at theoretical j = 4 level)
# transition probabilities to go from level 3 to theoretical j = 4 level
# State prices at level 3.
params = S4_Params[,c(1:4)]
alpha = 0.338; sigma = 0.305
dt = 0.083; dx = 0.153; r = params["R_ts",1]
#simplified prices at level 3:
level_x3 = dx*seq(from = -3, to = 3, by = 1)
nbNodes = 7 #number of nodes at 3rd level
j = 3
#transition probabilities: From Thomas Fillebeen
prob <- function(x, dt, alpha, dx, vol){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
# transition probs
level_x2 = dx*seq(from = -2, to = 2, by = 1)
probs_level3 = prob(3, dt, alpha, dx, sigma)
# Calculate a_3 so we can get option values at j = 3
df = exp(-r*dt)
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_level3: will have 7 nodes.
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
prob2_1 = prob(level_x2[1], dt, alpha, dx, sigma)
prob2_2 = prob(level_x2[2], dt, alpha, dx, sigma)
prob2_3 = prob(level_x2[3], dt, alpha, dx, sigma)
prob2_4 = prob(level_x2[4], dt, alpha, dx, sigma)
prob2_5 = prob(level_x2[5], dt, alpha, dx, sigma)
Q_3[1] = Q_2[1]*prob2_1$pd*df
prob <- function(x, dt, alpha, dx, vol){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = list(pu = pu, pm = pm, pd = pd)
return(prob)
}
# transition probs
level_x2 = dx*seq(from = -2, to = 2, by = 1)
probs_level3 = prob(3, dt, alpha, dx, sigma)
# Calculate a_3 so we can get option values at j = 3
df = exp(-r*dt)
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_level3: will have 7 nodes.
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
prob2_1 = prob(level_x2[1], dt, alpha, dx, sigma)
prob2_2 = prob(level_x2[2], dt, alpha, dx, sigma)
prob2_3 = prob(level_x2[3], dt, alpha, dx, sigma)
prob2_4 = prob(level_x2[4], dt, alpha, dx, sigma)
prob2_5 = prob(level_x2[5], dt, alpha, dx, sigma)
Q_3[1] = Q_2[1]*prob2_1$pd*df
Q_3
##### Problem 4: 3-level (indexing at 0) trinomial tree solution #####
#What do we need to fill out the 3rd level of the tree?
# simplified tree price levels
# Option values (i.e. discounted expected value of option values at theoretical j = 4 level)
# transition probabilities to go from level 3 to theoretical j = 4 level
# State prices at level 3.
params = S4_Params[,c(1:4)]
alpha = 0.338; sigma = 0.305
dt = 0.083; dx = 0.153; r = params["R_ts",1]
#simplified prices at level 3:
level_x3 = dx*seq(from = -3, to = 3, by = 1)
nbNodes = 7 #number of nodes at 3rd level
j = 3
#transition probabilities: From Thomas Fillebeen
prob <- function(x, dt, alpha, dx, vol, K){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/dx^2) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = list(pu = pu, pm = pm, pd = pd)
return(prob)
}
# transition probs
level_x2 = dx*seq(from = -2, to = 2, by = 1)
probs_level3 = prob(3, dt, alpha, dx, sigma)
# Calculate a_3 so we can get option values at j = 3
df = exp(-r*dt)
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_level3: will have 7 nodes.
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
prob2_1 = prob(level_x2[1], dt, alpha, dx, sigma)
prob2_2 = prob(level_x2[2], dt, alpha, dx, sigma)
prob2_3 = prob(level_x2[3], dt, alpha, dx, sigma)
prob2_4 = prob(level_x2[4], dt, alpha, dx, sigma)
prob2_5 = prob(level_x2[5], dt, alpha, dx, sigma)
P_2 = c(.1401, .6635, .1964, .1530, .6659, .1811,
.1667, .6667, .1667, .1811, .6659, .1530,
.1964, .1530, .6635, .1401)
Q_3[1] = Q_2[1]*P_2[1]*df
Q_3[nbNodes] = Q_3[1]
Q_3[2] = Q_2[1]*P_2[2]*df + Q_2[2]*P_2[4]*df
P_2
P_2[1]
nbNodes
Q_3[1] = Q_2[1]*P_2[1]*df
Q_2
df
df = exp(-r*dt)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
S4_Params[]
S4_Params["R_ts",1]
df = exp(-S4_Params["R_ts",1]*dt)
Q_3[1] = Q_2[1]*P_2[1]*df
Q_3[nbNodes] = Q_3[1]
Q_3[2] = Q_2[1]*P_2[2]*df + Q_2[2]*P_2[4]*df
Q_3[nbNodes-1] = Q_3[2]
Q_3
Q_2
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
Q_3
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
a_is
S4_Params
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
S4_Params
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
result1
result2
result3
result3
result1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
level_x3
Exij = level_x3-(alpha*level_x3*dt)
Exij
round(level_x3,2)
prob(round(level_x3,2), dt, alpha, dx, sigma, K)
prob(round(level_x3,2)[1], dt, alpha, dx, sigma, K)
prob(level_x3[1], dt, alpha, dx, sigma, K)
prob(level_x3[1], dt, alpha, dx, sigma, K)
level_x3[1]
sigma
alpha
dt
params = S4_Params[,c(1:4)]
alpha = 0.33767; sigma = 0.305
dt = 0.08333; dx = 0.1527; r = params["R_ts",1]
#simplified tree prices at level 2:
level_x2 = dx*seq(from = -2, to = 2, by = 1)
#simplified tree prices at level 3:
level_x3 = dx*seq(from = -3, to = 3, by = 1)
#number of nodes at 3rd level
nbNodes = 7
#transition probabilities: From Thomas Fillebeen
prob <- function(x, dt, alpha, dx, vol, K){
pu =  1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/(dx^2)) -
((alpha*x*dt)/dx)
pd = 1/2*((vol^2*dt + alpha^2*(x^2)*dt^2)/(dx^2)) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = list(pu = pu, pm = pm, pd = pd)
return(prob)
}
# transition probs, from level 2 to level 3
P_2 = c(.1401, .6635, .1964, .1530, .6659, .1811,
.1667, .6667, .1667, .1811, .6659, .1530,
.1964, .1530, .6635, .1401)
# Calculate a_3 so we can get option values at j = 3
df = exp(-S4_Params["R_ts",1]*dt)
#state prices at level 2:
Q_2 = c(0.0252, 0.2199, 0.4998, 0.2199, 0.0252)
#Want Q_3: state prices at level 3 (will have 7 nodes)
Q_3 = numeric(length = nbNodes)
#according to "State prices continued" slide
Q_3[1] = Q_2[1]*P_2[1]*df
Q_3[nbNodes] = Q_3[1]
Q_3[2] = Q_2[1]*P_2[2]*df + Q_2[2]*P_2[4]*df
Q_3[nbNodes-1] = Q_3[2]
Q_3[3] = Q_2[1]*P_2[3]*df + Q_2[2]*P_2[5]*df + Q_2[3]*P_2[7]*df
Q_3[nbNodes-2] = Q_3[3]
Q_3[4] = Q_2[2]*P_2[6]*df + Q_2[3]*P_2[8]*df + Q_2[4]*P_2[10]*df
#E[x_(i+1),j] = \bar{x}_{i,j} - alpha*\bar{x}_{i,j}*dt
Exij = level_x3-(alpha*level_x3*dt)
prob(level_x3[1], dt, alpha, dx, sigma, K)
0.2542007+0.6604268+0.08537247
prob <- function(x, dt, alpha, dx, vol, K){
pu =  1/2*(((vol^2)*dt + (alpha^2)*(x^2)*dt^2)/(dx^2)) -
((alpha*x*dt)/dx)
pd = 1/2*(((vol^2)*dt + (alpha^2)*(x^2)*dt^2)/(dx^2)) +
((alpha*x*dt)/dx)
pm = 1 - pu - pd
prob = list(pu = pu, pm = pm, pd = pd)
return(prob)
}
prob(level_x3[1], dt, alpha, dx, sigma, K)
level_x3[1]
prob(-/46, dt, alpha, dx, sigma, K)
prob(-.46, dt, alpha, dx, sigma, K)
sigma
((sigma^2)*dt + (alpha^2)*(-.46^2)*(dt^2))/(dx^2) - (alpha*-0.46*dt)/dx
.5*((sigma^2)*dt + (alpha^2)*(-.46^2)*(dt^2))/(dx^2) - (alpha*-0.46*dt)/dx
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
prob(level_x3[1], dt, alpha, dx, sigma, K)
1:nbNodes:3
nbNodes
j = 1
j:j+3
j:j+2
j:(j+2)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
offset
P_3 <- numeric(length = nbNodes*3)
offset = 0
for (j in 1:nbNodes){
P_3[offset:(offset+2)] = prob(level_x3[j], dt, alpha, dx, sigma, K)
print(offset)
offset = offset + 3
}
j
trans = prob(level_x3[j], dt, alpha, dx, sigma, K)
trans
c(trans)
unlist(trans)
P_3 <- numeric(length = nbNodes*3)
offset = 0
for (j in 1:nbNodes){
trans = prob(level_x3[j], dt, alpha, dx, sigma, K)
P_3[offset:(offset+2)] = unlist(prob(level_x3[j], dt, alpha, dx, sigma, K))
print(offset)
offset = offset + 3
}
P_3
P_3 <- numeric(length = nbNodes*3)
offset = 0
for (j in 1:nbNodes){
trans = prob(level_x3[j], dt, alpha, dx, sigma, K)
P_3[offset:(offset+2)] = c(trans$pd, trans$pm, trans$pu)
print(offset)
offset = offset + 3
}
P_3
# Transition probabilities from level 3 to theoretical level 4:
P_3 <- numeric(length = nbNodes*3)
offset = 1
for (j in 1:nbNodes){
trans = prob(level_x3[j], dt, alpha, dx, sigma, K)
P_3[offset:(offset+2)] = c(trans$pd, trans$pm, trans$pu)
print(offset)
offset = offset + 3
}
offset
19+2
P_3
# transition probs, from level 2 to level 3
P_2 <- numeric(length = 5*3)
offset = 1
for (j in 1:5){
trans = prob(level_x2[j], dt, alpha, dx, sigma, K)
P_3[offset:(offset+2)] = c(trans$pd, trans$pm, trans$pu)
print(offset)
offset = offset + 3
}
# transition probs, from level 2 to level 3
P_2 <- numeric(length = 5*3)
offset = 1
for (j in 1:5){
trans = prob(level_x2[j], dt, alpha, dx, sigma, K)
P_2[offset:(offset+2)] = c(trans$pd, trans$pm, trans$pu)
print(offset)
offset = offset + 3
}
P_2
#Assemble level_3:
level_3 = as.data.frame(matrix(0, nrow = 6, ncol = 7))
colnames(level_x3) = c("-3", "-2", "-1", "0", "1", "2", "3")
rownames(level_x3) = c("xij", "E[xij]", "Qij", "pu", "pm", "pd")
#Assemble 3rd level of simplified tree:
L3 = as.data.frame(matrix(0, nrow = 6, ncol = 7))
colnames(L3) = c("-3", "-2", "-1", "0", "1", "2", "3")
rownames(L3) = c("xij", "E[xij]", "Qij", "pu", "pm", "pd")
L3
nrow(L3)
Exij
Q_3
#Assemble 3rd level of simplified tree:
L3 = as.data.frame(matrix(0, nrow = 6, ncol = 7))
colnames(L3) = c("-3", "-2", "-1", "0", "1", "2", "3")
rownames(L3) = c("xij", "E[xij]", "Qij", "pu", "pm", "pd")
offset = 1
for (k in 1:ncol(L3)){
L3[1,k] = level_3[k]
L3[2,k] = Exij[k]
L3[3,k] = Q_3[k]
L3[4:6,k] = P_3[offset:(offset+2)]; offset = offset + 3
}
P_3
P_3[1:3]
L3[4:6, 1] = P_3[1:3]
L3
#Assemble 3rd level of simplified tree:
L3 = as.data.frame(matrix(0, nrow = 6, ncol = 7))
colnames(L3) = c("-3", "-2", "-1", "0", "1", "2", "3")
rownames(L3) = c("xij", "E[xij]", "Qij", "pu", "pm", "pd")
offset = 1
for (k in 1:ncol(L3)){
L3[1,k] = level_x3[k]
L3[2,k] = Exij[k]
L3[3,k] = Q_3[k]
L3[4:6,k] = P_3[offset:(offset+2)]; offset = offset + 3
}
L3
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
library(quantmod)
getSymbols("IRBT")
IRBT <- IRBT[c(2010:2014)]
View(IRBT)
getSymbols("IRBT", from = "2010-01-01", to = "2014-12-31")
View(IRBT)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(IRBT)
dailyRet <- diff(log(IRBT))
View(dailyRet)
dailyRet <- diff(log(IRBT[, "IRBT.Adjusted"]))
dailyRet <- diff(log(IRBT[, "IRBT.Close"]))
monthlyReturn(IRBT[,"IRBT.Close"], type='log')
View(IRBT)
colnames(IRBT)
IRBT[,4]
IRBT[,"IRBT.Close"]
closePrices <- IRBT[,"IRBT.Close"]
source('~/.active-rstudio-document')
source('~/Desktop/Solns_HW3.R')
qqnorm(dailyRet)
qqnorm(dailyRet)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
rt?
help(rt)
View(dailyRet)
View(quartlyRet)
dailyRet <- na.omit(dailyRet)
qqnorm(dailyRet)
qqnorm(dailyRet)
qqnorm(monthlyRet)
source('~/.active-rstudio-document')
qqnorm(monthlyRet, main = "Monthly CC returns, Q-Q Plot", xlim = c(-3,3))
abline(b = 1)
abline(a = 0, b = 1, col = "red")
abline(a = 1, b = 0, col = "red")
qqnorm(monthlyRet, main = "Monthly CC returns, Q-Q Plot", xlim = c(-3,3))
abline(a = 1, b = 0, col = "red")
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
dt
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
