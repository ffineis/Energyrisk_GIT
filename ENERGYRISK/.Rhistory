not_returning_codes = c(0,1,4,7)
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = temp, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=temp, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = temp, size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
View(plotRoute)
len(lons)
length(lons)
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = plotRoute$LON
lats = plotRoute$LAT
zm = 9
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
lons = plotRoute$LON
lats = plotRoute$LAT
zm = 12
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
lons = plotRoute$LON
lats = plotRoute$LAT
zm = 11
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
lons[1]
### Analysis of Ugly Rides ###
#Combine ride cost information with general routing data
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
data <- cbind(read.csv("UW_Trip_Data_QC.csv"), dataToMerge[,2:4])
option(digits = 6)
library(timeDate)
library(ggmap)
View(data)
option(digits = 6)
dataToMerge <- read.csv("matchedMatrix.csv")
data <- cbind(read.csv("UW_Trip_Data_QC.csv"), dataToMerge[,2:4])
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 6), dataToMerge[,2:4])
View(data)
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
View(data)
library(timeDate)
library(ggmap)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
clients_route <- na.omit(unique(route$ClientId))
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = plotRoute$LON
lats = plotRoute$LAT
zm = 11
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
library(timeDate)
library(ggmap)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
clients_route <- na.omit(unique(route$ClientId))
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = plotRoute$LON
lats = plotRoute$LAT
zm = 11
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
lons
lats
lons = int(plotRoute$LON)
lons = as.numeric(plotRoute$LON)
lats = as.numeric(plotRoute$LAT)
zm = 11
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = plotRoute, size = .24, colour = "red")
}
}
print(p)
View(plotRoute)
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = as.numeric(plotRoute[,c("LAT", "LON")]), size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "red")
}
}
print(p)
lons = as.numeric(plotRoute$LON)
lats = as.numeric(plotRoute$LAT)
zm = 10
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = as.numeric(plotRoute[,c("LAT", "LON")]), size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "red")
}
}
print(p)
source('~/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/R/Cost_Analysis_UglyRides.R')
source('~/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/R/Cost_Analysis_UglyRides.R')
library(timeDate)
library(ggmap)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
clients_route <- na.omit(unique(route$ClientId))
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(plotRoute$LON)
lats = as.numeric(plotRoute$LAT)
zm = 10
center_King_Co = c(mean(lons), mean(lats))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap")
p <- ggmap(map)+
geom_point(aes(x = lons, y = lats), data = as.numeric(plotRoute[,c("LAT", "LON")]), size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), data = temp, size = .24, colour = "red")
for (j in seq(2, (nrow(plotRoute)-1),2)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data = as.numeric(plotRoute[,c("LAT", "LON")]), size = .24, colour = "red")
}
}
print(p)
# for (run in 1:rides){
#   temp_ride = data[which(data$Run == run),]
#   dates_ride = unique(temp_ride$ServiceDate)
#   for (k in 1:length(dates_ride)){
#
#   }
# }
lons
lats
View(plotRoute)
route$LAT
nrow(plotRoute)
plotRoute$LON
plotRoute$LAT
View(plotRoute)
plotRoute$LAT
len(plotRoute$LON)
length(plotRoute$LON)
length(plotRoute$LAT)
lons
length(lons)
length(lats)
S9_ForwardCurve = read.csv("/Users/fineiskid/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/data/csv/S9_ForwardCurve.csv")
S9_Params = read.csv("/Users/fineiskid/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/data/csv/S9_ModelParams.csv")
S9_ForwardCurve
S9_Params
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo9_code.R')
valDate
valEnd
storDates = as.Date(S9_ForwardCurve[1,1]:S9_ForwardCurve[length(S9_ForwardCurve[,1]),1])
source('~/.active-rstudio-document')
storDates
storDates = as.Date(S9_ForwardCurve$Date[1]:S9_ForwardCurve$Date[nrow(S9_ForwardCurve)])
S9_ForwardCurve$Date <- as.Date(S9_ForwardCurve$Date)
S9_ForwardCurve$Date[1]
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo9_code.R')
source('~/.active-rstudio-document')
storDates
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo9_code.R')
K
VOM
format(storDates[-length(storDates)],"%m")
length(storDates)
nbDays
as.numeric(format(storDates[-1],"%m")))+1)
as.numeric(format(storDates[-1],"%m")))+1
as.numeric(format(storDates[-1],"%m"))
indexStartDates = c(1, which(as.numeric(format(storDates[-length(storDates)],"%m"))!=as.numeric(format(storDates[-1],"%m")))+1)[-13]
indexStartDates
bucketStartDates = storDates[indexStartDates]
bucketStartDates
indexEndDates = c(which(as.numeric(format(storDates[-length(storDates)],"%m"))!= as.numeric(format(storDates[-1],"%m")))[-12],364)
indexEndDates
bucketEndDates = storDates[indexEndDates]
head(cbind(indexStartDates,indexEndDates))
S9_Params
S9_Params[2, "rho_Power"]
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo9_code.R')
a
b
N
S9_ForwardCurve$Heating.Oil
S9_ForwardCurve
valueStor
r
as.numeric(storDates[1]-valDate)
exp(-r*as.numeric(storDates[1]-valDate))/365)
exp(-r*as.numeric(storDates[1]-valDate)/365)
i = 2
trackMonth = which(format(S9_ForwardCurve$Date,"%m%y")==format(storDates[i+1],"%m%y"))
trackMonth
i = 200
trackMonth = which(format(S9_ForwardCurve$Date,"%m%y")==format(storDates[i+1],"%m%y"))
trackMonth
format(S9_ForwardCurve$Date,"%m%y")
F_t1 = c(S9_ForwardCurve[trackMonth,"Power"],S9_ForwardCurve[trackMonth,"Gas"],S9_ForwardCurve[trackMonth,"Heating.Oil"])
F_t1
S9_ForwardCurve
trackMonth
F_t2 = c(S9_ForwardCurve[trackMonth+1,"Power"],S9_ForwardCurve[trackMonth+1,"Gas"],S9_ForwardCurve[trackMonth+1,"Heating.Oil"])
F_t2
1-(1/2) - (1/3)
1/8
source('~/.active-rstudio-document')
qqline()
qqline(monthlyRet)
length(monthlyRet)
quarterlyRet <- quarterlyReturn(closePrice, type = 'log')
retStore <- list(daily = dailyRet, monthly = monthlyRet, weekly = weeklyRet, quarterly <- quarterlyRet)
par(mfrow = c(2,2))
for(i in 1:4){
qqnorm(retStore[[i]])
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
retStore[1]
retStore[[1]]
retStore[[4]]
colnames(retStore[[4]])
sep(colnames(retStore))
sep(colnames(retStore))
strsplit(colnames(retStore[[1]]))
strsplit(colnames(retStore[[1]]), split = ".")
colnames(retStore[[4]])
strsplit(colnames(retStore[[4]]), split = ".")
strsplit(colnames(retStore[[4]]), ".")
i = 2
title = colnames(retStore[[i]])
title
class(title)
class(unlist(title)
)
strsplit(title, ".")
strsplit(unlist(title), ".")
title[1]
title
title[[1]]
title[[[1]]
title[[[1]]]
title[[1]]
title[[1]][1]
title[[1]][[1]
]
title[[1]][[1]][1]
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW3/Solns_HW3.R')
source('~/.active-rstudio-document')
library(quantmod)
#return daily data for IRBT
getSymbols("IRBT", from = "2010-01-01", to = "2014-12-31")
View(IRBT)
closePrice <- IRBT[,"IRBT.Close"]
dailyRet <- diff(log(IRBT[, "IRBT.Close"]))
dailyRet <- na.omit(dailyRet)
#monthly, weekly, quarterly CC returns
monthlyRet <- monthlyReturn(IRBT[,"IRBT.Close"], type='log')
weeklyRet <- weeklyReturn(closePrice, type = 'log')
quarterlyRet <- quarterlyReturn(closePrice, type = 'log')
#PLOTTING BEST PRACTICES:
# Make explanatory titles
# When plotting several plots, make axes as equitable as possible between plots
# Make axes have similar number of tick marks
retStore <- list(daily = dailyRet, monthly = monthlyRet, weekly = weeklyRet, quarterly <- quarterlyRet)
titles = c("Daily Ret Q-Q", "Monthly Ret Q-Q", "Weekly Ret Q-Q", "Quarterly Ret Q-Q")
par(mfrow = c(2,2))
for(i in 1:4){
title = colnames(retStore[[i]])
qqnorm(retStore[[i]], xlim = c(-3,3), ylim = c(-.4, .4), main = titles[i], cex.main = .9)
qqline(retStore[[i]], col = 'blue')
}
retStore <- list(daily = dailyRet, monthly = monthlyRet, weekly = weeklyRet, quarterly <- quarterlyRet)
titles = c("Daily Ret Q-Q", "Monthly Ret Q-Q", "Weekly Ret Q-Q", "Quarterly Ret Q-Q")
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW3/Solns_HW3.R')
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW3/Solns_HW3.R')
View(closePrice)
