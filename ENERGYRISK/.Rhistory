S1[0]
S1[1]
FT(S1[1,1], params$alpha, params$mu, params$s, .5)
FT(S1[1,1], params$alpha, params$mu, params$s, 1)
params$S
spread1 <- abs(FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1))
spread1
K <- abs(FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1))
K
params$K
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT(X, params$alpha, params$mu, params$sigma, .5))
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT(x, params$alpha, params$mu, params$sigma, .5))
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT, params$alpha, params$mu, params$sigma, .5)
S1[,ncol(S1)]
spread1 <- apply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
S1[,ncol(S1)]
length(S1[,ncol(S1)])
spread1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
spread1
spread = abs(ft05-ft1)
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = abs(ft05-ft1)
spreadd
spread
K
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
payoffSpread
call_value4 <- discrate*mean(payoffSpread)
call_value4
se4 <- sd(payoffSpread)/sqrt(params$M)
se4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
## Structure of an Option
# Set initial parameters
alpha = 0.338; sigma = 0.305404;
# N is the number of periods in a year
N = 12
# In months we have
delta_t = 1/12
# The relationship between the space step and the time step is given by:
delta_x = sigma * sqrt(delta_t*3)
param = list(alpha,sigma,delta_t,delta_x)
names(param) = c("alpha","sigma","delta_t","delta_x")
t(param)
# Based on the delta_t from above load a data.frame() w/ parameters for estimation
# Load data from S4_Params.txt file in directory
# If save .txt file into .rda and reload it using folder path data()
data(S4_Params)
# Illustrate first and last 6 obs to get a quick view of the data
S4_Params
# 1) Setup and option object that will pass all the option information
# Put into a list and return
S0 = S4_Params["F_Price",]$X0; K = 21; r = S4_Params["R_ts",]$X0;
vol = param$sigma; r = S4_Params["R_ts",]$X0;  ttm = S4_Params["Maturity",]$X12;
# Create optionSpec
optionSpec = list(S0, K, ttm, r, vol)
names(optionSpec) = c("S0", "K", "maturity", "r","volatility")
t(optionSpec)
# 2) Simplified tree
# Size of up move is $delta_x
# Setup Risk neutral probability for j = 0, i = 0
# (i represents the time step, j the spot price level)
j = 0 ; i = 0 ;
prob = prob(j, delta_t, alpha, delta_x, vol)
prob
df = exp(-r * delta_t)
# At the terminal node, there are N/2 asset values (6-month of the year)
# Level_x represents the max/min price changes that can occur for the terminal node
level_x = -c(-delta_x*((N/2):1),delta_x*(0:(N/2)))
level_x
j.index = seq(from=0, to=N/2, by=1)
nbNodes = seq(from=1,to=length(level_x),by=2)
nbNodes
j.index
mult = 1
# i) Initialize the backwardation apporach: start w/ terminal node
F = exp(as.numeric(a_i[length(j.index)]) + level_x)
a_i = a_i(prob, delta_x, j.index, df, nbNodes)
a_i
## Option Valuation: EUROPEAN
# d) Estimate Price Paths
# Set Call/Put multiplier +/-
mult = 1
# i) Initialize the backwardation apporach: start w/ terminal node
F = exp(as.numeric(a_i[length(j.index)]) + level_x)
F
V = pmax(0, mult * (F- K))
help(pmax)
pmax(-2:4, 0)
V
cat("Time step: ", N/2, "\n", sep="")
cat("Prices:\n")
print(F)
i.index = seq(from=N/2-1, to=0, by=-1)
offset = 1
i.index
for (i in i.index) print(i)
i = 5
level_xt = -c(-delta_x*((i):1),delta_x*(0:i))
# Load up probabilities to estimate expected value
j  = level_xt
j
prob = prob(j, delta_t, alpha, delta_x, vol)
prob
E_V = cbind(V[1:(length(V)-2)],V[2:(length(V)-1)],V[3:length(V)])
E_V
F = exp(as.numeric(a_i[length(j.index)-offset]) + level_xt)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
prob = prob(0, params$dt, params$alpha, params$dx, params$sigma)
prob
nbNodes
k = 1
nbNodes[2]-4
nbNodes[3+1]-4
nbNodes[2+1]-4
V = pmax(0, mult * (Forw- K))
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_i[length(j.index)]) + level_x)
a_is <- ai(prob, params, delta_x, j.index, df, nbNodes)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a_is <- a_i(prob, params, params$dx, j.index, df, nbNodes)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
V
cat("Time step: ", N/2, "\n", sep="")
cat("Prices:\n")
print(F)
cat("Option Values:\n")
print(V)
i.index = seq(from=N/2-1, to=0, by=-1)
offset = 1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
library(ENERGYRISK)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
K <- FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1)
K
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5+.5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1+.5)
spread = ft05-ft1
spread
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
se4 <- sd(payoffSpread)/sqrt(params$M)
results4 <- list('call value' = call_value4, "se" = se4)
print(results4)
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = ft05-ft1
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
se4 <- sd(payoffSpread)/sqrt(params$M)
results4 <- list('call value' = call_value4, "se" = se4)
print(results4)
print(results3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
FT(params$S, params$alpha, params$mu, params$sigma, .5)
FT(params$S, params$alpha, params$mu, params$sigma, 1)
library(ENERGYRISK)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results2
source('~/.active-rstudio-document')
View(lnSmat1)
results2
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
View(lnSmat1)
AznS1 <- apply(S1[,2:11], 1, mean); AznS2 <- apply(S2[,2:11], 1, mean) #get row means of spot price sims
zero = rep(0, params$M)
AznS1 <- apply(S1[,2:11], 1, mean); AznS2 <- apply(S2[,2:11], 1, mean) #get row means of spot price sims
zero = rep(0, params$M)
payoff_S1 = apply(cbind(zero,AznS1-params$K), 1, max)
payoff_S2 = apply(cbind(zero,AznS2-params$K), 1, max)
payoff = apply(cbind(payoff_S1, payoff_S2), MARGIN = 1, FUN = mean)
payoff
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results3
dt
time = as.matrix(seq(0,0.5,0.05))
time
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
time
results4
results3
barrier
View(`S1_3mo`)
barrier[1]
payoff_barrier
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results3
source('~/.active-rstudio-document')
results3
results4
K
S1[,ncol(S1)]
K <- FT(params$S, params$alpha, params$mu, params$sigma, 1)- FT(params$S, params$alpha, params$mu, params$sigma, .5)
K <- FT(params$S, params$alpha, params$mu, params$sigma, 1)- FT(params$S, params$alpha, params$mu, params$sigma, .5)
K
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = ft1-ft05
spread
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
call_value4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
library(ENERGYRISK)
data(data_S5)
library(ENERGYRISK)
data(data_S5)
S5_ForwardCurve
S5_StorageContract
forwards = S5_ForwardCurve
class(forwards)
contract_info = S5_StorageContract
contract_info$withRate = 16393.4426229508
dim(forwards)
forwards
valDate
source('~/.active-rstudio-document')
valDate
forwards
striplength = dim(forwards)[1]
injectionlength = seq(2,striplength,1) #cut off April withdraw/inject, can't happen
fSpread = matrix(0, striplength-1, striplength-1)
striplength
forwards
injectionlength
paste(forwards$Date[2:11])
forwards
contract_info$withFuelCost
S5_ForwardCurve[4,1]-valDate
contract_info
injectionlength
j = 2
(S5_ForwardCurve[j:striplength,2]*(1-S5_StorageContract$withFuelCost) + -S5_StorageContract$withCost)*    + exp(-S5_StorageContract$r*as.numeric(S5_ForwardCurve[j:striplength,1]-valDate)/365)
(S5_ForwardCurve[j:striplength,2]*(1-S5_StorageContract$withFuelCost)-S5_StorageContract$withCost)*exp(-S5_StorageContract$r*as.numeric(S5_ForwardCurve[j:striplength,1]-valDate)/365)
S5_StorageContract$withFuelCost
forwards
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
View(fSpread)
striplength
injWith = matrix(0,2,striplength)
ForwardCurve_AddMonth = S5_ForwardCurve[,1] #dates
ForwardCurve_AddMonth
month(ForwardCurve_AddMonth)
library(lubridate)
month(ForwardCurve_AddMonth) = month(S5_ForwardCurve[,1]) +1
month(ForwardCurve_AddMonth)
month(ForwardCurve_AddMonth) = month(S5_ForwardCurve[,1]) +1
ForwardCurve_AddMonth
S5_ForwardCurve[,1]
daysInMonth = ForwardCurve_AddMonth-S5_ForwardCurve$Date
daysInMonth
S5_StorageContract$injRate
S5_StorageContract$capacity
class(daysInMonth)
rbind(pmin(as.numeric(daysInMonth*S5_StorageContract$injRate))),S5_StorageContract$capacity)
rbind(pmin(as.numeric(daysInMonth*S5_StorageContract$injRate)),S5_StorageContract$capacity)
pmin(as.numeric(daysInMonth*S5_StorageContract$injRate),S5_StorageContract$capacity
)
pmin(as.numeric(daysInMonth*S5_StorageContract$injRate),S5_StorageContract$capacity)
daysInMonth
injWith = matrix(0,2,striplength)
ForwardCurve_AddMonth = S5_ForwardCurve[,1] #dates (will add 1 month)
month(ForwardCurve_AddMonth) = month(S5_ForwardCurve[,1]) +1 #dates + 1month
daysInMonth = ForwardCurve_AddMonth-S5_ForwardCurve$Date #difftime object
daysInMonth
as.numeric(daysInMonth)
pmin(as.numeric(daysInMonth*S5_StorageContract$injRate),S5_StorageContract$capacity)
injWith =
round(rbind(pmin(as.numeric(daysInMonth*S5_StorageContract$injRate),S5_StorageContract$capacity),
pmin(as.numeric(daysInMonth*S5_StorageContract$withRate),S5_StorageContract$capacity)))
injWith
colnames(injWith) = paste(S5_ForwardCurve$Date)
injWith
type(paste(S5_ForwardCurve$Date))
class(paste(S5_ForwardCurve$Date))
class(S5_ForwardCurve$Date)
rownames(injWith) = c("Max injection", "Max withdrawal")
injWith
source('~/.active-rstudio-document')
position
guess = position[upper.tri(position,diag=TRUE)]
help(upper.tri)
upper.tri(fSpread)
upper.tri(fSpread, diag=T)
matrixInde = seq(1,striplength-1,1)
rm(matrixInde)
matrixIndex = seq(1,striplength-1,1)
for(v in 1:11){matrixNb[v,v:11] = c(1:(12-v)) + offset; offset = offset + 12- length(1:v)}
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
matrixNb
length(guess)
matrixNb
strMatrix = matrix(0,striplength-1,length(guess))
strMatrix
for(k in 1:11){strMatrix[k,] = seq(1,length(guess),1)}
strMatrix
withrawalRemoval=0
storedAmount = 0
matrixIndex
> for (i in matrixIndex){
tempIndex = c(storedAmount,matrixNb[i,])
tempIndex = tempIndex[-which(tempIndex==0)]
if (i>1){tempIndex = tempIndex[-which(storedAmount %in% withrawalRemoval)]}
# Remove all injections so that can set everything else to zero
setOV = strMatrix[i,-match(tempIndex,strMatrix[i,])]
strMatrix[i,match(tempIndex,strMatrix[i,])] =1
strMatrix[i,setOV] =0
#strMatrix[tempIndex] = 1
withrawalRemoval = matrixNb[,i]
#Remove zeros so indexing stays correct
withrawalRemoval = withrawalRemoval[-which(withrawalRemoval==0)]
storedAmount = c(storedAmount,matrixNb[i,])
# Remove zeros so indexing stays correct
storedAmount = storedAmount[-which(storedAmount==0)]
# Update accumulation
storedAmount = tempIndex
}
for (i in matrixIndex){
tempIndex = c(storedAmount,matrixNb[i,])
tempIndex = tempIndex[-which(tempIndex==0)]
if (i>1){tempIndex = tempIndex[-which(storedAmount %in% withrawalRemoval)]}
# Remove all injections so that can set everything else to zero
setOV = strMatrix[i,-match(tempIndex,strMatrix[i,])]
strMatrix[i,match(tempIndex,strMatrix[i,])] =1
strMatrix[i,setOV] =0
#strMatrix[tempIndex] = 1
withrawalRemoval = matrixNb[,i]
#Remove zeros so indexing stays correct
withrawalRemoval = withrawalRemoval[-which(withrawalRemoval==0)]
storedAmount = c(storedAmount,matrixNb[i,])
# Remove zeros so indexing stays correct
storedAmount = storedAmount[-which(storedAmount==0)]
# Update accumulation
storedAmount = tempIndex
}
i = 1
tempIndex = c(storedAmount,matrixNb[i,])
tempIndex = tempIndex[-which(tempIndex==0)]
tempIndex
matrixIndex
matrixNb
matrixNb[i,]
tempIndex = c(storedAmount,matrixNb[i,])
tempIndex
storedAmount
tempIndex = c(storedAmount,matrixNb[i,])
tempIndex
tempIndex = tempIndex[-which(tempIndex==0)]
tempIndex
withrawalRemoval=0
storedAmount = 0
tempIndex = c(storedAmount, matrixNb[i,])
tempIndex = tempIndex[-which(tempIndex==0)]
tempIndex
if (i>1){tempIndex = tempIndex[-which(storedAmount %in% withrawalRemoval)]}
strMatrix
strMatrix[i,]
match(tempIndex,strMatrix[i,])
setOV = strMatrix[i,-match(tempIndex,strMatrix[i,])]
setOV
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
storedAmount
strMatrix
injWith
strInjectC = matrix(0,striplength01, length(guess))
for (i in matrixIndex){
strInjectC = matrix(0,striplength-1, length(guess))
source('~/.active-rstudio-document')
strInjectC
dim(storedAmount)
dim(strInjectC)
for (i in matrixIndex){strInjectC[i,(c(1:(12-i)) + offset)] = 1; offset = offset + 12- length(1:i)}
for (i in matrixIndex){strInjectC[i,(c(1:(12-i)) + offset)] = 1;
offset = offset + 12- length(1:i)}
offet = 0
for (i in matrixIndex){strInjectC[i,(c(1:(12-i)) + offset)] = 1;
offset = offset + 12- length(1:i)}
i
strInjectC[i, (c(1:12-i))]
strInjectC[i, (c(1:12-i)+offset)]
strInjectC[i, (c(1:12-i))+offset)]
strInjectC[i, (c(1:(12-i))+offset)]
(c(1:(12-i)) + offset)
offset
offet = 0
strInjectC[i,(c(1:(12-i)) + offset)]
(c(1:(12-i)) + offset)
offset
offset = 0
for (i in matrixIndex){strInjectC[i,(c(1:(12-i)) + offset)] = 1;
offset = offset + 12- length(1:i)}
matrixIndex
source('~/.active-rstudio-document')
strInjectC
strWithC = matrix(0,striplength-1,length(guess))
offset = 0
for (i in matrixIndex){strWithC[i,matrixNb[,i]] = 1}
strWithC
strMatrix
A = rbind(strMatrix,strInjectC,strWithC)
gues
guess
b = matrix(0,3*dim(strMatrix)[1],1)
b
rownames(injWith)
b[1:11]=S5_StorageContract$capacity;b[12:22]=t(injWith["Max_injection",1:11])
injWith[1,1:11]
injWith[1,1:12]
VfSpread = matrix(0,66,1);offset=0;a=1;rowUp=11;
for (j in 2:12){
VfSpread[a:(rowUp-(j-2))] =((S5_ForwardCurve[j:striplength,2]*(1-S5_StorageContract$withFuelCost)-S5_StorageContract$withCost)*
exp(-S5_StorageContract$r*as.numeric(S5_ForwardCurve[j:striplength,1]-valDate)/365)-
(S5_ForwardCurve[j-1,2]*(1+S5_StorageContract$injFuelCost)+S5_StorageContract$injCost)*
exp(-S5_StorageContract$r*as.numeric(S5_ForwardCurve[j-1,1]-valDate)/365))
a = a+11-offset; rowUp=rowUp+11-offset;offset = offset +1}
VfSpread
fSpread
matrixNb
install.packages("Rglpk")
library(Rlgpk)
library(Rglpk)
b
injWith
b[22:33] = t(injWith["Max_withdrawal", 1:11])
injWith["Max_withdrawal", 1:11]
b[1:11]=S5_StorageContract$capacity;b[12:22]=t(injWith["Max_injection",1:11])
b[22:33] = t(injWith["Max_withdrawal", 1:11])
b[1:11]=S5_StorageContract$capacity;b[12:22]=t(injWith["Max_injection",1:11])
b[23:33] = t(injWith["Max_withdrawal", 1:11])
b
VfS`
VfS
VfSpread
S5_StorageContract$convRate
monthRevenue = pmax(VfSpread,0)*S5_StorageContract$convRate
monthRevenue
c
c(b)
b
monthRevenue
library(ENERGYRISK)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
params$S
params$K
print(results2)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
print(results2)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
avgStore[M]
avgStore[params$M]
results2
avg_storage = matrix(0,nSims,1)
avg_storage = matrix(0,params$M,1)
for(k in 1:params$M){avg_storage[k] = mean(avg_payoff[1:k])}
for(k in 1:params$M){avg_storage[k] = mean(payoff[1:k])}
plot(avg_storage, type = "l", lwd = 3, xlab = "Number of Simulations",
ylab = "Averaged Payoff", main = "MC Asian Call Option, Antithetics")
abline(h = results2$call_value)
avg_storage = matrix(0,params$M,1)
for(k in 1:params$M){avg_storage[k] = mean(payoff[1:k])}
plot(avg_storage, type = "l", lwd = 3, xlab = "Number of Simulations",
ylab = "Averaged Payoff", main = "MC Asian Call Option, Antithetics")
abline(h = results2$call_value)
results2$call_value
avg_storage[1000]
avg_storage = matrix(0,params$M,1)
for(k in 1:params$M){avg_storage[k] = discrate*mean(payoff[1:k])}
plot(avg_storage, type = "l", lwd = 3, xlab = "Number of Simulations",
ylab = "Averaged Payoff", main = "MC Asian Call Option, Antithetics")
abline(h = results2$call_value)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results2
View(`S1_3mo`)
barrier
results3
payoff_B1
payoff_B2
params$sigma
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results4
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
data <- read.table('./data/csv/ICENBP.txt', sep = "\t", header = T)
data
matrix(c(1:6), nrow = 3, ncol = 2)
cbind(1:3, 4:6)
cbind(1:6)
vector(1:3)
