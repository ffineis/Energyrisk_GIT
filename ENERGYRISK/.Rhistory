data <- read.table('./data/csv/ICENBP.txt', sep = "\t", header = T)
returns <- diff(log(data$St))[-1]
JPit <- function(R = returns, limit = 3, tolVar = "phi", tol = 1){
tolVarnames = c("phi", "gamma", "kappa_bar", "nJumps")
if(!(tolVar %in% tolVarnames)){stop("tolVar must be phi, gamma, or kappa_bar")}
if(tolVar == "nJumps" & !(class(tol)=="integer" | class(tol)=="numeric")){stop("tolVar = nJumps must be an integer")}
#analyze data for first iteration:
cutoff = sd(returns)*limit
jumps = returns[which(abs(returns)>cutoff)]
nojumps = returns[which(abs(returns)<= cutoff)]
nJ = length(jumps)
jumpStore = list("jumps" = jumps, "nojumps" = nojumps, "nJ" = nJ)
nObs = length(returns)
phi = jumpStore$nJ/(nObs/365)
sigma = sd(jumpStore$nojumps)*(sqrt(365))
kappa_bar = mean(jumpStore$jumps)
gamma = sd(jumpStore$jumps)
JDiters = data.frame(c(jumpStore$nJ, phi, sigma, kappa_bar, gamma))
rownames(JDiters) <- c("nJumps", "phi", "sigma", "kappa_bar", "gamma")
colnames(JDiters) <- "Iteration 1"
conv = F
ctr = 1
while(!conv){
ctr = ctr+1
cutoff = sd(jumpStore$nojumps)*limit
jumpStore$jumps <- returns[which(abs(returns)>cutoff)]
jumpStore$nojumps <- returns[which(abs(returns)<=cutoff)]
jumpStore$nJ <- length(jumpStore$jumps)
phi = jumpStore$nJ/(nObs/365)
sigma = sd(jumpStore$nojumps)*(sqrt(365))
kappa_bar = mean(jumpStore$jumps)
gamma = sd(jumpStore$jumps)
temp = data.frame(c(jumpStore$nJ, phi, sigma, kappa_bar, gamma))
rownames(temp) <- c("nJumps", "phi", "sigma", "kappa_bar", "gamma")
colnames(temp) <- paste("Iteration ", ctr, sep = "")
JDiters <- cbind(JDiters, temp)
tvOld <- JDiters[which(rownames(JDiters)==tolVar),ctr-1]
tvNew <- JDiters[which(rownames(JDiters)==tolVar),ctr]
if(abs(tvOld-tvNew)<tol){conv=T}
}
return(JDiters)
}
results1 <- JPit(R = returns, limit = 3, tolVar = "phi", tol = 1)
print(results1)
######################## Problem 2 ###############################
set.seed(1)
#Polar Rejection Random Number Generator:
randPolarRejc <- function(){
x2_available = FALSE
x1=0;x2=0;u1=0;u2=0;w=0;c=0
if(x2_available){
x2_available = FALSE
randPolarRejc = x2
}else{
repeat{
u1 = runif(1) * 2 - 1
u2 = runif(1) * 2 - 1
w = u1 * u1 + u2 * u2
if(w <= 1){
c = sqrt(-2 * log(w) / w)
x1 = c * u1
x2 = c * u2
x2_available <<- TRUE
randPolarRejc = x1
break
}
}
}
return(randPolarRejc)
}
#Spot price iteration function
lnS <- function(logPrice, param, sigrdt, dt, setRand){
lnS = logPrice + (param$alpha*(param$mu-logPrice)
- 0.5*param$sigma^2)*dt + sigrdt*setRand
return(lnS)
}
params = list("S" = 21.05, "alpha" = 1.196, "K" = 21.05, "T" = 0.5, "mu" = 3.053,
"sigma" = 0.529, "s" = 1, "N" = 10, "M" = 100)
discrate = exp(-0.1*params$T)
lnSmat1 = matrix(data = 0, nrow = params$M, ncol = length(time))
lnSmat1[,1] <- log(params$S); lnSmat2 <- lnSmat1
dt = params$T/params$N
time <- seq(0, params$T, dt)
sigrdt = params$sigma*sqrt(dt)
meanStorage1 <- exp(lnSmat1); meanStorage2 <- exp(lnSmat2)
lnSmat1 = matrix(data = 0, nrow = params$M, ncol = length(time))
dim(lnSmat1)
lnSmat1[,1] <- log(params$S); lnSmat2 <- lnSmat1
dim(lnSmat1)
dim(lnSmat2)
lnSmat1[,1] <- log(params$S); lnSmat2 <- lnSmat1
dt = params$T/params$N
time <- seq(0, params$T, dt)
sigrdt = params$sigma*sqrt(dt)
meanStorage1 <- exp(lnSmat1); meanStorage2 <- exp(lnSmat2)
for (ii in 1:params$M){
for (jj in 2:ncol(lnSmat1)){
rnd = randPolarRejc()
lnSmat1[ii,jj] = lnS(lnSmat1[ii, (jj-1)], params, sigrdt, dt, rnd)
lnSmat2[ii,jj] = lnS(lnSmat2[ii, (jj-1)], params, sigrdt, dt, -rnd)
meanStorage1[ii, jj] = mean(exp(lnSmat1[ii, 1:jj]))
meanStorage2[ii, jj] = mean(exp(lnSmat2[ii, 1:jj]))
}
}
View(meanStorage1)
S1 <- as.data.frame(exp(lnSmat1))
S2 <- as.data.frame(exp(lnSmat2))
colnames(S1) <- time; colnames(S2) <- time;
AznS1 <- apply(S1, 1, mean); AznS2 <- apply(S2, 1, mean) #get row means of spot price sims
zero = rep(0, params$M)
payoff_S1 = apply(cbind(zero,AznS1-params$K), 1, max)
payoff_S2 = apply(cbind(zero,AznS2-params$K), 1, max)
payoff = apply(cbind(payoff_S1, payoff_S2), MARGIN = 1, FUN = mean)
call_value2 = discrate*mean(payoff)
se2 = sd(payoff)/sqrt(params$M)
results2 = list("call_value" = call_value2, "se"  = se2)
print(results2)
avgStore <- numeric(params$M)
for (k in 1:params$M){avgStore[k] <- mean(payoff[1:k])}
plot(1:params$M, avgStore, type = "l", lwd = 3, xlab = "Number of Simulations",
ylab = "Averaged Payoff", main = "MC Asian Call Option, Antithetics")
abline(h = results2$call_value)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
lnSmat1 = matrix(0, nrow = params$M, ncol = length(time))
for(z in 1:nrow(lnSmat1)){lnSmat1[z,1] <- log(params$S)}
lnSmat2 = lnSmat1
dim(lnSmat1)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
time <- seq(0, params$T, dt)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
View(lnSmat1)
View(lnSmat2)
params$S+.1*params$S
class(lnSmat1)
View(`S1`)
View(`S2`)
barrier <- c(0.9*params$S,  1.1*params$S)
barrier
View(`S1`)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
View(`S1_3mo`)
barier
barrier
23.155 %in% barrier
23.154 %in% barrier
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0], Rbound <- range[1]
if (value >= Lbound & value <= Rbound){return TRUE}
else{return FALSE}
}
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0], Rbound <- range[1]
if (value >= Lbound & value <= Rbound){return(TRUE)}
else{return(FALSE)}
}
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0], Rbound <- range[1]
if (value >= Lbound & value <= Rbound){return(TRUE)}
else {return(FALSE)}
}
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0], Rbound <- range[1]
if (value >= Lbound & value <= Rbound){
return(TRUE)
}
else {
return(FALSE)
}
}
in_range <- function(range, value){
Lbound <- range[0], Rbound <- range[1]
######################## Problem 3 ###############################
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0]; Rbound <- range[1]
if (value >= Lbound & value <= Rbound){
return(TRUE)
}
else {
return(FALSE)
}
}
barrier
in_range(barrier, 23.155)
######################## Problem 3 ###############################
barrier <- c(0.9*params$S,  1.1*params$S)
S1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]
in_range <- function(range, value){
Lbound <- range[0]; Rbound <- range[1]
if ((value >= Lbound) & (value <= Rbound)){
return(TRUE)
}
else {
return(FALSE)
}
}
in_range(barrier, 23.155)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
in_range(barrier, 23.155)
barrier[0]
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
in_range(barrier, 23.155)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
in_range(barrier, 23.155)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
in_range(barrier, 23.155)
temp = apply(S1_3mo[ii,], 1, in_range)
ii = 1
temp = apply(S1_3mo[ii,], 1, in_range)
S1_3mo[ii,]
temp = apply(S1_3mo[ii,], 1, in_range, barrier)
temp
help(apply)
any(S1_3mo[ii,] < barrier[1] | S1_3mo[ii,] > barrier[2])
barrier
source('~/.active-rstudio-document')
tempB1
tempB2
payoff_B1 = apply(cbind(zero,tempB1-params$K), 1, max)
payoff_B2 = apply(cbind(zero,tempB2-params$K), 1, max)
payoff_B2
payoff_B1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
call_value3
se3
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
data(S4params)
load("./data/S4_Params.rda")
S4_Params
dx = sigma*sqrt(3*dt)
alpha = 0.338; sigma = 0.305404; dt = 1/12; N = 12
dx = sigma*sqrt(3*dt)
dx
S4_Params
alpha = 0.338; sigma = 0.305404; dt = 1/12; N = 12
dx = sigma*sqrt(3*dt)
params = list("alpha" = alpha, "sigma" = sigma, "dt" = dt, "dx" = dx)
option_params = list("S0" = S4_Params["F_Price",1], "K" = 21, "ttm" = 1, "r" = S4_Params["R_ts",1], "vol" = params$alpha)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
prob(0, params$dt, params$alpha, params$dx, params$sigma)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
prahb <- prob(0, params$dt, params$alpha, params$dx, params$sigma)
ai(prob, params$dx, j.index = seq(0, N/2, by =1))
a_i(prob, params$dx, j.index = seq(0, N/2, by =1), df = exp(option_params$r*-params$dt))
a_i(prob, params$dx, seq(0, N/2, by =1), df = exp(option_params$r*-params$dt))
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
a_i(prob, params$dx, seq(0, N/2, by =1), df = exp(option_params$r*-params$dt))
level_x = -c(-delta_x*((N/2):1),delta_x*(0:(N/2))) #trinomial tree prices at time N/2
level_x = -c(-params$dx*((N/2):1),params$dx*(0:(N/2))) #trinomial tree prices at time N/2
level_x
j.index = seq(from=0, to=N/2, by=1)
j.index
nbNodes = seq(from=1,to=length(level_x),by=2)
nbNodes
df = exp(-option_params$r * delta_t)
df = exp(-option_params$r * params$t)
df
df = exp(-option_params$r * params$dt)
df
j.index = 5
level_x
level_x[j.index+1]
j.index
level_x[6]
length(j.index)
j.index
j.index = seq(from=0, to=N/2, by=1)
level_x[j.index+1]
level_x[j.index]
level_x[j.index+1]
length(level_x)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
S1[0]
S1[1]
FT(S1[1,1], params$alpha, params$mu, params$s, .5)
FT(S1[1,1], params$alpha, params$mu, params$s, 1)
params$S
spread1 <- abs(FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1))
spread1
K <- abs(FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1))
K
params$K
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT(X, params$alpha, params$mu, params$sigma, .5))
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT(x, params$alpha, params$mu, params$sigma, .5))
spread1 <- apply(X = S1[,ncol(S1)], MARGIN = 1, FUN = FT, params$alpha, params$mu, params$sigma, .5)
S1[,ncol(S1)]
spread1 <- apply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
S1[,ncol(S1)]
length(S1[,ncol(S1)])
spread1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
spread1
spread = abs(ft05-ft1)
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = abs(ft05-ft1)
spreadd
spread
K
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
payoffSpread
call_value4 <- discrate*mean(payoffSpread)
call_value4
se4 <- sd(payoffSpread)/sqrt(params$M)
se4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
## Structure of an Option
# Set initial parameters
alpha = 0.338; sigma = 0.305404;
# N is the number of periods in a year
N = 12
# In months we have
delta_t = 1/12
# The relationship between the space step and the time step is given by:
delta_x = sigma * sqrt(delta_t*3)
param = list(alpha,sigma,delta_t,delta_x)
names(param) = c("alpha","sigma","delta_t","delta_x")
t(param)
# Based on the delta_t from above load a data.frame() w/ parameters for estimation
# Load data from S4_Params.txt file in directory
# If save .txt file into .rda and reload it using folder path data()
data(S4_Params)
# Illustrate first and last 6 obs to get a quick view of the data
S4_Params
# 1) Setup and option object that will pass all the option information
# Put into a list and return
S0 = S4_Params["F_Price",]$X0; K = 21; r = S4_Params["R_ts",]$X0;
vol = param$sigma; r = S4_Params["R_ts",]$X0;  ttm = S4_Params["Maturity",]$X12;
# Create optionSpec
optionSpec = list(S0, K, ttm, r, vol)
names(optionSpec) = c("S0", "K", "maturity", "r","volatility")
t(optionSpec)
# 2) Simplified tree
# Size of up move is $delta_x
# Setup Risk neutral probability for j = 0, i = 0
# (i represents the time step, j the spot price level)
j = 0 ; i = 0 ;
prob = prob(j, delta_t, alpha, delta_x, vol)
prob
df = exp(-r * delta_t)
# At the terminal node, there are N/2 asset values (6-month of the year)
# Level_x represents the max/min price changes that can occur for the terminal node
level_x = -c(-delta_x*((N/2):1),delta_x*(0:(N/2)))
level_x
j.index = seq(from=0, to=N/2, by=1)
nbNodes = seq(from=1,to=length(level_x),by=2)
nbNodes
j.index
mult = 1
# i) Initialize the backwardation apporach: start w/ terminal node
F = exp(as.numeric(a_i[length(j.index)]) + level_x)
a_i = a_i(prob, delta_x, j.index, df, nbNodes)
a_i
## Option Valuation: EUROPEAN
# d) Estimate Price Paths
# Set Call/Put multiplier +/-
mult = 1
# i) Initialize the backwardation apporach: start w/ terminal node
F = exp(as.numeric(a_i[length(j.index)]) + level_x)
F
V = pmax(0, mult * (F- K))
help(pmax)
pmax(-2:4, 0)
V
cat("Time step: ", N/2, "\n", sep="")
cat("Prices:\n")
print(F)
i.index = seq(from=N/2-1, to=0, by=-1)
offset = 1
i.index
for (i in i.index) print(i)
i = 5
level_xt = -c(-delta_x*((i):1),delta_x*(0:i))
# Load up probabilities to estimate expected value
j  = level_xt
j
prob = prob(j, delta_t, alpha, delta_x, vol)
prob
E_V = cbind(V[1:(length(V)-2)],V[2:(length(V)-1)],V[3:length(V)])
E_V
F = exp(as.numeric(a_i[length(j.index)-offset]) + level_xt)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
prob = prob(0, params$dt, params$alpha, params$dx, params$sigma)
prob
nbNodes
k = 1
nbNodes[2]-4
nbNodes[3+1]-4
nbNodes[2+1]-4
V = pmax(0, mult * (Forw- K))
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_i[length(j.index)]) + level_x)
a_is <- ai(prob, params, delta_x, j.index, df, nbNodes)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a_is <- a_i(prob, params, params$dx, j.index, df, nbNodes)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
V
cat("Time step: ", N/2, "\n", sep="")
cat("Prices:\n")
print(F)
cat("Option Values:\n")
print(V)
i.index = seq(from=N/2-1, to=0, by=-1)
offset = 1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
library(ENERGYRISK)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
K <- FT(params$S, params$alpha, params$mu, params$sigma, .5) - FT(params$S, params$alpha, params$mu, params$sigma, 1)
K
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5+.5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1+.5)
spread = ft05-ft1
spread
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
se4 <- sd(payoffSpread)/sqrt(params$M)
results4 <- list('call value' = call_value4, "se" = se4)
print(results4)
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = ft05-ft1
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
se4 <- sd(payoffSpread)/sqrt(params$M)
results4 <- list('call value' = call_value4, "se" = se4)
print(results4)
print(results3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
FT(params$S, params$alpha, params$mu, params$sigma, .5)
FT(params$S, params$alpha, params$mu, params$sigma, 1)
library(ENERGYRISK)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results2
source('~/.active-rstudio-document')
View(lnSmat1)
results2
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
View(lnSmat1)
AznS1 <- apply(S1[,2:11], 1, mean); AznS2 <- apply(S2[,2:11], 1, mean) #get row means of spot price sims
zero = rep(0, params$M)
AznS1 <- apply(S1[,2:11], 1, mean); AznS2 <- apply(S2[,2:11], 1, mean) #get row means of spot price sims
zero = rep(0, params$M)
payoff_S1 = apply(cbind(zero,AznS1-params$K), 1, max)
payoff_S2 = apply(cbind(zero,AznS2-params$K), 1, max)
payoff = apply(cbind(payoff_S1, payoff_S2), MARGIN = 1, FUN = mean)
payoff
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results3
dt
time = as.matrix(seq(0,0.5,0.05))
time
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
time
results4
results3
barrier
View(`S1_3mo`)
barrier[1]
payoff_barrier
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results3
source('~/.active-rstudio-document')
results3
results4
K
S1[,ncol(S1)]
K <- FT(params$S, params$alpha, params$mu, params$sigma, 1)- FT(params$S, params$alpha, params$mu, params$sigma, .5)
K <- FT(params$S, params$alpha, params$mu, params$sigma, 1)- FT(params$S, params$alpha, params$mu, params$sigma, .5)
K
ft05 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, .5)
ft1 <- sapply(X = S1[,ncol(S1)], FUN = FT, params$alpha, params$mu, params$sigma, 1)
spread = ft1-ft05
spread
payoffSpread <- apply(cbind(zero,spread-K), MARGIN = 1, max)
call_value4 <- discrate*mean(payoffSpread)
call_value4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
