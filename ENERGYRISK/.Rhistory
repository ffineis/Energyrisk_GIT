source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results4
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
results4
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW1.R')
library(ENERGYRISK)
data <- read.table('./data/csv/ICENBP.txt', sep = "\t", header = T)
data
matrix(c(1:6), nrow = 3, ncol = 2)
cbind(1:3, 4:6)
cbind(1:6)
vector(1:3)
library(ENERGYRISK)
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
monthRevenue
source('~/.active-rstudio-document')
VfSpread
View(A)
View(A)
monthRevenue = pmax(VfSpread,0)*S5_StorageContract$convRate #c vector
dir = c(rep("<=",33))
sol = Rglpk_solve_LP(obj=c(monthRevenue),mat=A,dir=dir,rhs=c(b),types = rep("I"),max=TRUE)
sol$optimum
sol$status
sol$solution
sol$optimum
strMatrix
injWith
tempIndex
strMatrix
matrixNb
tempIndex
storedAmount
strMatrix
strInjectC
strInjectC
strWithC
strInjectC
b
monthRevenue
summary(VfSpread)
sol$solution
monthRevenue
A%*%sol$solution
sol$optimum
A%*%sol$solution <= b
storageLevel = rbind(0, strMatrix%*%sol$solution) #strMatrix imposed total storage constraint on month by month basis.
storageLevel
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo5_code.R')
S5_StorageContract$withRate
S5_StorageContract$withRate/3
S5_StorageContract$withRate/2
letters
"frank" %in% letters
which(letters == c("f", "r", "a", "n", "k"))
match(letters == c("f", "r", "a", "n", "k"))
match(letters, c("f", "r", "a", "n", "k"))
matched <- match(letters, c("f", "r", "a", "n", "k"))
matched.nao <- na.omit(matched)
matched.nao
letters[match(letters, c("f", "r", "a", "n", "k"))]
subset(letters, c("f", "r", "a", "n", "k"))
matched[!is.na(matched)]<-T
matched
letters[matched]
frank <- "frank"
for (j in frank){}
for (j in frank){}
for (j in frank){print(which(letters==j))}
which(for(j in 1:26){letters[j]}=="f")
which(letters == "f")
which(letters == "r")
which(letters == "a")
which(letters == "n")
which(letters == "k")
for (j in frank){print(which(letters==j))}
for (j in frank){print(j)}
frank = c("f", "r", "a", "n", "k")
for (j in frank){print(which(letters==j))}
myname <- c(letters[6], letters[18], letters[1], letters[14], letters[11])
myname
library(stringr)
toupper(myname)
which(letters %in% "frank")
which(letters %in% c("f", "r", "a", "n", "l"))
which(letters %in% c("f", "r", "a", "n", "k"))
frank <- letters[which(letters %in% c("f", "r", "a", "n", "k"))]
fineis <- letters[which(letters %in% c("f", "i", "n", "e", "i", "s"))]
paste(paste(frank, sep = ""), paste(fineis, sep = ""), sep = " ")
frank
fineis <- letters[order(which(letters %in% c("f", "i", "n", "e", "i", "s")), decreasing = F]
fineis <- letters[order(which(letters %in% c("f", "i", "n", "e", "i", "s")), decreasing = F)]
fineis
frank <- letters[which(letters %in% c("f", "r", "a", "n", "k"))]
frnak
frank
which(letters %in% c("f", "r", "a", "n", "k"))
franknum <- which(letters %in% c("f", "r", "a", "n", "k"))
sort(franknum, decreasing = F)
myname
source('~/.active-rstudio-document')
last.num
source('~/.active-rstudio-document')
last.num
fineis <- letters[last.num]
fineis
fineis <- toupper(fineis)
fineis
source('~/.active-rstudio-document')
FINEIS
FRANK
myname <- paste(paste(FRANK, sep = ""), paste(FINEIS, sep = ""), sep = " ")
myname
FRANK
paste(FRANK, sep = "")
unlist(FINEIS)
unlist(FINEIS, recursive = )
c(FINEIS)
paste(FINEIS, sep = "", collapse = "")
paste(FINEIS, collapse = "")
myname <- paste(paste(FRANK, collapse = ""), paste(FINEIS, collapse = ""), sep = " ")
myname
log <- rep(T,5)
log
log <- c(rep(T,5), rep(F,21))
letters[log]
library(MASS)
chem
chem[which(chem %in% range(3,4))]
chem[which(chem >= 3 & chem <= 4]
chem[which(chem >= 3 & chem <= 4)]
howmany <- length(chem[which(chem >= 3 & chem <= 4)])
howmany
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW2/solns_HW2.R')
w = c(9, 27, 15, 8, 10, 2, 70, 1, 4, 17, 9, 44)
sort(w, decreasing = F)
library(quantmod)
getSymbols("F")
View(`F`)
Ford <- F
Ford[2012]
Ford["2012"]
Ford <- Ford["2012"]
Ford
View(Ford)
Ford["row.names",]
Ford[,1]
rownames(Ford)
Ford <- Ford["2012"]
plot(Ford[,"F.Adjusted"])
hist(Ford[,5])
hist(Ford[,6])
hist(Ford[,6], density = T)
prices <- Ford[,"F.Adjusted"]
hist(prices, density = T)
hist(prices, probability = T)
hist(prices, probability = T, main = F)
hist(prices, probability = T, main = "NA")
hist(prices, probability = T, main = "")
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Ford <- Ford["2012"]
prices <- Ford[,"F.Adjusted"]
par(mar = c(3.5, 2.5, 3, 6)+0.1)
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
par(mar = c(0, 0, 3, 6)+0.1)
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
prices <- Ford[,"F.Adjusted"]
par(mar = c(4.5, 3.5, 3, 6)+0.1)
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
prices <- Ford[,"F.Adjusted"]
#par(mar = c(4.5, 3.5, 3, 6)+0.1)
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW2/solns_HW2.R')
help(kde)
density(prices)
plot(density(prices))
min(prices)
max(prices)
prices
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5))
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5), xaxt = "n")
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5), axes=F)
plot(hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5)) axes=F)
plot(hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5)), axes=F)
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price",
xlim = c(7.5, 12.5))
plot(density(prices), xlim = c(8, 12))
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
plot(density(prices), xlim = c(8, 12), bw = .25)
plot(density(prices, bw = .25), xlim = c(8, 12))
plot(density(prices, bw = .25, ), xlim = c(8, 12), main = "", xlab = "2012 Ford Adj. Closing Price")
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW2/solns_HW2.R')
frank <- c("f", "r", "a", "n", "k")
frank
"frank"
paste(FRANK, collapse = "")
source('~/Desktop/AMATH_Summer_UW/CRFM_461/Current_HW/HW2/solns_HW2.R')
paste(FRANK, collapse = "")
class(Ford)
class(F)
View(`F`)
help(axis)
plot(density(prices, bw = .25), xlim = c(8, 12), main = "", xlab = "2012 Ford Adj. Closing Price")
prices <- Ford[,"F.Adjusted"]
library(quantmod)
getSymbols("F")
Ford <- Ford["2012"]
prices <- Ford[,"F.Adjusted"]
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
plot(density(prices, bw = .25), xlim = c(8, 12), main = "", xlab = "2012 Ford Adj. Closing Price")
Ford <- F["2012"]
prices <- Ford[,"F.Adjusted"]
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price")
plot(density(prices, bw = .25), xlim = c(8, 12), main = "", xlab = "2012 Ford Adj. Closing Price")
plot(density(prices, bw = .25), xlim = c(8, 12), main = "", xlab = "2012 Ford Adj. Closing Price", yaxt = "n")
hist(prices, probability = T, main = "", xlab = "2012 Ford Adj. Closing Price", yaxt ="n")
library(ENERGYRISK)
library(EnergyRisk)
library(ENERGYRISK)
data(S4_Params)
S4_Params
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a_is
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
a_is
dim(a_is)
rownames(a_is) <- "a_i"
a_is
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
j.index = seq(from=0, to=6, by=1)
nbNodes = seq(from=1,to=length(level_x),by=2) #number of nodes at each time point
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
N
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
nbNodes
N
level_x
discount
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
discount
#Code from CFRM 520 Demo 4
# Trinomial tree model for fitting energy spot prices to forward curves
library(ENERGYRISK)
#load tree parameters: forward curve data, discount rate info
load("./data/S4_Params.rda")
#parameters
alpha = 0.338; sigma = 0.305404; dt = 1/12; N = 12; K = 21
dx = sigma*sqrt(3*dt); delta_x = dx; vol = sigma; delta_t = dt
params = list("alpha" = alpha, "sigma" = sigma, "dt" = dt, "dx" = dx)
option_params = list("S0" = S4_Params["F_Price",1], "K" = 21, "ttm" = 1, "r" = S4_Params["R_ts",1], "vol" = params$alpha)
#transition probabilities between trinomial branches at starting node. From Thomas Fillebeen
prob <- function(j, delta_t, alpha, delta_x, vol){
i=0
pu =  c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 - (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pd = c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 + (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
#Estimate mean reversion parameters to fit spot price to forward curve. From Thomas Fillebeen.
a_i <- function(prob, params, delta_x, j.index, df, nbNodes){
# a) Estimate initialize state price accumulation (t = 0)
Q = 1; sum_Q = exp(0)*Q;
vol  = params$sigma
delta_t = params$dt
prob = prob(0, params$dt, params$alpha, params$dx, params$sigma)
# b) Preliminary steps to estimating a_i which are chosen to ensure that
# the tree correctly returns the observed forward price curve:
# -1 b/c we initalized in a) already
for (k in 1:(length(j.index)-1)){
overLap = 0
offset = 0
# Count the number of overlapping possibilities
nb3Legs = nbNodes[k+1] - 4
if(nb3Legs<0){nb3Legs =1}
level_xt = -c(-delta_x*((k):1),delta_x*(0:(k)))
for(z in 1:nb3Legs){
if(length(prob)==3){str_Q = df*Q*prob[1:3]
}else{
overLap = c(overLap,sum(prob[c(3,5,7)+offset]*Q[c(1:3)+(z-1)]))
# Make sure to capture all overlapping possibilities
if(z==nb3Legs){
str_Q = df*c(Q[1]*prob[1], sum(Q[1:2]*prob[c(2,4)]),overLap[2:length(overLap)],
sum(Q[length(Q):(length(Q)-1)]*prob[c(length(prob)-1,length(prob)-3)]),
Q[length(Q)]*prob[length(prob)])
}
offset = offset + 3
}
}
Q = str_Q #value at t = 0 of a security that pays $1 if on node (i,j), $0.00 otherwise
sum_Q = c(sum_Q,(sum(Q*exp(level_xt))))
# Re-estimate the probabilities for a given j
j  = level_xt
prob = prob(j, delta_t, alpha, delta_x, vol)
}
# c) Estimate a_i
a_i = log(S4_Params["P_ts",]* S4_Params["F_Price",]/sum_Q)
rownames(a_i) = "a_i"
# Since we are only interested in the first 6-months (index starts 0)
temp = a_i[j.index+1]
return(temp)
}
df = exp(-option_params$r * params$dt)
level_x = -c(-params$dx*((N/2):1),params$dx*(0:(N/2))) #trinomial tree prices at time N/2. Symmetric about 0.
j.index = seq(from=0, to=N/2, by=1)
nbNodes = seq(from=1,to=length(level_x),by=2) #number of nodes at each time point
a_is <- a_i(prob, params, params$dx, j.index, df, nbNodes)
#Value a European call. Note: payoff for a call is F-K, payoff for put is K-F
# Set Call/Put multiplier +/-
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_is[length(j.index)]) + level_x)
V = pmax(0, mult * (Forw- K))
cat("Time step: ", N/2, "\n", sep="")
cat("Prices:\n")
print(Forw)
cat("Option Values:\n")
print(V)
i.index = seq(from=N/2-1, to=0, by=-1)
offset = 1
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
Forw
level_x
j.index
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
i
level_xt = -c(-tree_Params$delta_x*((i):1),tree_Params$delta_x*(0:i))
level_xt
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
df
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/.active-rstudio-document')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
level_xt
level_x
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/R/Lattices.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
print(sprintf("level_xt: %s", level_xt))
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
a_is
level_x
### CFRM 520 HW2. Frank Fineis.
library(ENERGYRISK)
source("./R/Lattices.R")
data(S4_Params)
tree_Params <- list("alpha" = 0.338, "delta_t" = 0.8333333, "delta_x" = 0.152702,
"S0" = 21.05, "K" = 21, "maturity" = 1, "r" = 0.06, "volatility" = 0.305404)
a_is <- t(data.frame(c(3.046901, 3.041576, 3.034532, 3.027756, 3.021138, 3.014664, 3.008326)))
colnames(a_is) <- c("X0", "X1", "X2", "X3", "X4", "X5", "X6")
rownames(a_is) <- "a_i"
#set up tree characteristics for the preliminary tree.
discount <- exp(-tree_Params$r*tree_Params$delta_t)
level_x = -c(-tree_Params$delta_x*((6):1),tree_Params$delta_x*(0:(6))) #trinomial tree prices at time N/2. Symmetric about 0.
j.index = seq(from=0, to=6, by=1) #month number, 0 to 6 by 1's
nbNodes = seq(from=1,to=length(level_x),by=2) #number of nodes at each time point
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_is[length(j.index)]) + level_x)
V = pmax(0, mult * (Forw- tree_Params$K))
prob
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
option_params$r
### CFRM 520 HW2. Frank Fineis.
library(ENERGYRISK)
source("./R/Lattices.R")
data(S4_Params)
tree_Params <- list("alpha" = 0.338, "delta_t" = 0.8333333, "delta_x" = 0.152702,
"S0" = 21.05, "K" = 21, "maturity" = 1, "r" = 0.06, "volatility" = 0.305404)
a_is <- t(data.frame(c(3.046901, 3.041576, 3.034532, 3.027756, 3.021138, 3.014664, 3.008326)))
colnames(a_is) <- c("X0", "X1", "X2", "X3", "X4", "X5", "X6")
rownames(a_is) <- "a_i"
a_is
tree_Params$alpha
tree_Params$delta_t
tree_Params$delta_x
a_is
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
discount
V
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
V
F
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
### CFRM 520 HW2. Frank Fineis.
library(ENERGYRISK)
source("./R/Lattices.R")
data(S4_Params)
tree_Params <- list("alpha" = 0.338, "delta_t" = 0.8333333, "delta_x" = 0.152702,
"S0" = 21.05, "K" = 21, "maturity" = 1, "r" = 0.06, "volatility" = 0.305404)
a_is <- t(data.frame(c(3.046901, 3.041576, 3.034532, 3.027756, 3.021138, 3.014664, 3.008326)))
colnames(a_is) <- c("X0", "X1", "X2", "X3", "X4", "X5", "X6")
rownames(a_is) <- "a_i"
#set up tree characteristics for the preliminary tree.
discount <- exp(-tree_Params$r*tree_Params$delta_t)
level_x = -c(-tree_Params$delta_x*((6):1),tree_Params$delta_x*(0:(6))) #trinomial tree prices at time N/2. Symmetric about 0.
j.index = seq(from=0, to=6, by=1) #month number, 0 to 6 by 1's
nbNodes = seq(from=1,to=length(level_x),by=2) #number of nodes at each time point
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_is[length(j.index)]) + level_x)
V = pmax(0, mult * (Forw- tree_Params$K))
# forward prices and option values at time = 0.5 yr
cat("Time step: ", 6, "\n", sep="")
cat("Prices:\n")
print(Forw)
cat("Option Values:\n")
print(V)
i.index = seq(from=6-1, to=0, by=-1)
offset = 1
i = 1
i = 5
level_xt = -c(-tree_Params$delta_x*((i):1),tree_Params$delta_x*(0:i))
# Get transition probabilities to estimate expected value
j  = level_xt
print(sprintf("level_xt: %s", level_xt))
prob = prob(j, tree_Params$delta_t, tree_Params$alpha, tree_Params$delta_x, tree_Params$volatility)
prob
j
tree_Params$delta_t
level_xt = -c(-tree_Params$delta_x*((i):1),tree_Params$delta_x*(0:i))
# Get transition probabilities to estimate expected value
j  = level_xt
print(sprintf("level_xt: %s", level_xt))
prob = prob(j, tree_Params$delta_t, tree_Params$alpha, tree_Params$delta_x, tree_Params$volatility)
prob
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
library(ENERGYRISK)
source("./R/Lattices.R")
data(S4_Params)
tree_Params <- list("alpha" = 0.338, "delta_t" = 0.8333333, "delta_x" = 0.152702,
"S0" = 21.05, "K" = 21, "maturity" = 1, "r" = 0.06, "volatility" = 0.305404)
a_is <- t(data.frame(c(3.046901, 3.041576, 3.034532, 3.027756, 3.021138, 3.014664, 3.008326)))
colnames(a_is) <- c("X0", "X1", "X2", "X3", "X4", "X5", "X6")
rownames(a_is) <- "a_i"
prob <- function(j, delta_t, alpha, delta_x, vol){
i=0
pu =  c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 - (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pd = c(1/2*((vol^2*delta_t + alpha^2* j^2*delta_t^2)/
delta_x^2 + (i-i)^2 + (alpha* j*delta_t)/delta_x*
(1-2*(i-i)) - (i-i)))
pm = 1 - pu - pd
prob = t(cbind(pu,pm,pd))
return(prob)
}
#set up tree characteristics for the preliminary tree.
discount <- exp(-tree_Params$r*tree_Params$delta_t)
level_x = -c(-tree_Params$delta_x*((6):1),tree_Params$delta_x*(0:(6))) #trinomial tree prices at time N/2. Symmetric about 0.
j.index = seq(from=0, to=6, by=1) #month number, 0 to 6 by 1's
nbNodes = seq(from=1,to=length(level_x),by=2) #number of nodes at each time point
mult = 1
# i) Fitted forward prices, spot price data fitted correctly
Forw = exp(as.numeric(a_is[length(j.index)]) + level_x)
V = pmax(0, mult * (Forw- tree_Params$K))
# forward prices and option values at time = 0.5 yr
cat("Time step: ", 6, "\n", sep="")
cat("Prices:\n")
print(Forw)
cat("Option Values:\n")
print(V)
i.index = seq(from=6-1, to=0, by=-1)
offset = 1
i.index
i = 5
level_xt = -c(-tree_Params$delta_x*((i):1),tree_Params$delta_x*(0:i))
# Get transition probabilities to estimate expected value
j  = level_xt
print(sprintf("level_xt: %s", level_xt))
prob = prob(j, tree_Params$delta_t, tree_Params$alpha, tree_Params$delta_x, tree_Params$volatility)
prob
j
tree_Params$delta_t
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/Demo4_code.R')
source('~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/Energyrisk_GIT/ENERGYRISK/homework_files/HW2.R')
