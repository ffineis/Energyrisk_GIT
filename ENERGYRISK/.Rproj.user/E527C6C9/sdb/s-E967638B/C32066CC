{
    "contents" : "# HW 1 file: CFRM 520\n# Frank Fineis\nlibrary(ENERGYRISK)\n\n########## Problem 1: iterative convergence of Jump diffusion parameters ###########\ndata <- read.table('./data/csv/ICENBP.txt', sep = \"\\t\", header = T)\nreturns <- diff(log(data$St))[-1]\n\nJPit <- function(R = returns, limit = 3, tolVar = \"phi\", tol = 1){\n  tolVarnames = c(\"phi\", \"gamma\", \"kappa_bar\", \"nJumps\")\n  if(!(tolVar %in% tolVarnames)){stop(\"tolVar must be phi, gamma, or kappa_bar\")}\n  if(tolVar == \"nJumps\" & !(class(tol)==\"integer\" | class(tol)==\"numeric\")){stop(\"tolVar = nJumps must be an integer\")}\n  \n  #analyze data for first iteration:\n  cutoff = sd(returns)*limit\n  jumps = returns[which(abs(returns)>cutoff)]\n  nojumps = returns[which(abs(returns)<= cutoff)]\n  nJ = length(jumps)\n  jumpStore = list(\"jumps\" = jumps, \"nojumps\" = nojumps, \"nJ\" = nJ)\n  nObs = length(returns)\n  phi = jumpStore$nJ/(nObs/365)\n  sigma = sd(jumpStore$nojumps)*(sqrt(365))\n  kappa_bar = mean(jumpStore$jumps)\n  gamma = sd(jumpStore$jumps)\n  JDiters = data.frame(c(jumpStore$nJ, phi, sigma, kappa_bar, gamma))\n  rownames(JDiters) <- c(\"nJumps\", \"phi\", \"sigma\", \"kappa_bar\", \"gamma\")\n  colnames(JDiters) <- \"Iteration 1\"\n  conv = F\n  ctr = 1\n  \n  while(!conv){\n    ctr = ctr+1\n    cutoff = sd(jumpStore$nojumps)*limit \n    jumpStore$jumps <- returns[which(abs(returns)>cutoff)]\n    jumpStore$nojumps <- returns[which(abs(returns)<=cutoff)]\n    jumpStore$nJ <- length(jumpStore$jumps)\n    phi = jumpStore$nJ/(nObs/365)\n    sigma = sd(jumpStore$nojumps)*(sqrt(365))\n    kappa_bar = mean(jumpStore$jumps)\n    gamma = sd(jumpStore$jumps)\n    temp = data.frame(c(jumpStore$nJ, phi, sigma, kappa_bar, gamma))\n    rownames(temp) <- c(\"nJumps\", \"phi\", \"sigma\", \"kappa_bar\", \"gamma\")\n    colnames(temp) <- paste(\"Iteration \", ctr, sep = \"\")\n    JDiters <- cbind(JDiters, temp)\n    tvOld <- JDiters[which(rownames(JDiters)==tolVar),ctr-1]\n    tvNew <- JDiters[which(rownames(JDiters)==tolVar),ctr]\n    if(abs(tvOld-tvNew)<tol){conv=T}\n  }\n  return(JDiters)\n}\nresults1 <- JPit(R = returns, limit = 3, tolVar = \"phi\", tol = 1)\nprint(results1)\n\n\n################## Problem 2: value Asian option ###################\nset.seed(1)\n#Polar Rejection Random Number Generator:\nrandPolarRejc <- function(){  \n  x2_available = FALSE\n  x1=0;x2=0;u1=0;u2=0;w=0;c=0\n  if(x2_available){\n    x2_available = FALSE\n    randPolarRejc = x2\n  }else{\n    repeat{\n      u1 = runif(1) * 2 - 1\n      u2 = runif(1) * 2 - 1\n      w = u1 * u1 + u2 * u2\n      if(w <= 1){\n        c = sqrt(-2 * log(w) / w)\n        x1 = c * u1\n        x2 = c * u2\n        x2_available <<- TRUE\n        randPolarRejc = x1\n        break\n      }\n    }\n  }\n  return(randPolarRejc)\n}\n#Spot price iteration function\nlnS <- function(logPrice, param, sigrdt, dt, setRand){  \n  lnS = logPrice + (param$alpha*(param$mu-logPrice) \n                    - 0.5*param$sigma^2)*dt + sigrdt*setRand\n  return(lnS)\n}\nparams = list(\"S\" = 21.05, \"alpha\" = 1.196, \"K\" = 21.05, \"T\" = 0.5, \"mu\" = 3.053,\n              \"sigma\" = 0.529, \"s\" = 1, \"N\" = 10, \"M\" = 100)\ndiscrate = exp(-0.1*params$T)\ndt = params$T/params$N\ntime <- seq(0, params$T, dt)\nlnSmat1 = matrix(0, nrow = params$M, ncol = length(time))\nlnSmat1[,1] <- log(params$S)\nlnSmat2 = lnSmat1\nsigrdt = params$sigma*sqrt(dt)\nmeanStorage1 <- exp(lnSmat1); meanStorage2 <- exp(lnSmat2)\nfor (ii in 1:params$M){\n  for (jj in 2:ncol(lnSmat1)){\n    rnd = randPolarRejc()\n    lnSmat1[ii,jj] = lnS(lnSmat1[ii, (jj-1)], params, sigrdt, dt, rnd)\n    lnSmat2[ii,jj] = lnS(lnSmat2[ii, (jj-1)], params, sigrdt, dt, -rnd)\n    meanStorage1[ii, jj] = mean(exp(lnSmat1[ii, 1:jj]))\n    meanStorage2[ii, jj] = mean(exp(lnSmat2[ii, 1:jj]))\n  }\n}\nS1 <- as.data.frame(exp(lnSmat1))\nS2 <- as.data.frame(exp(lnSmat2))\ncolnames(S1) <- time; colnames(S2) <- time; \nAznS1 <- apply(S1, 1, mean); AznS2 <- apply(S2, 1, mean) #get row means of spot price sims\nzero = rep(0, params$M)\npayoff_S1 = apply(cbind(zero,AznS1-params$K), 1, max)\npayoff_S2 = apply(cbind(zero,AznS2-params$K), 1, max)\npayoff = apply(cbind(payoff_S1, payoff_S2), MARGIN = 1, FUN = mean)\ncall_value2 = discrate*mean(payoff)\nse2 = sd(payoff)/sqrt(params$M)\nresults2 = list(\"call_value\" = call_value2, \"se\"  = se2)\nprint(results2)\n\navgStore <- numeric(params$M)\nfor (k in 1:params$M){avgStore[k] <- mean(payoff[1:k])}\nplot(1:params$M, avgStore, type = \"l\", lwd = 3, xlab = \"Number of Simulations\",\n     ylab = \"Averaged Payoff\", main = \"MC Asian Call Option, Antithetics\")\nabline(h = results2$call_value)\n\n\n###################### Problem 3: value knock-out barrier option ######################\nbarrier <- c(0.9*params$S,  1.1*params$S)\nS1_3mo <- S1[,7:11]; S2_3mo <- S2[,7:11]\ntempB1 <- numeric(params$M); tempB2 <- tempB1\nfor (ii in 1:nrow(S1_3mo)){\n  if(any(S1_3mo[ii,] < barrier[1] | S1_3mo[ii,] > barrier[2])){\n    tempB1[ii] <- 0\n  }\n  else{\n    tempB1[ii] <- S1_3mo[ii,ncol(S1_3mo)]\n  }\n  if(any(S2_3mo[ii,] < barrier[1] | S2_3mo[ii,] > barrier[2])){\n    tempB2[ii] <- 0\n  }\n  else{\n    tempB2[ii] <- S2_3mo[ii,ncol(S2_3mo)]\n  }\n}\npayoff_B1 = apply(cbind(zero,tempB1-params$K), 1, max)\npayoff_B2 = apply(cbind(zero,tempB2-params$K), 1, max)\npayoff_barrier <- apply(cbind(payoff_B1, payoff_B2), 1, mean)\ncall_value3 <- discrate*mean(payoff_barrier)\nse3 <- sd(payoff_barrier)/sqrt(params$M)\nresults3 <- list(\"call_value\" = call_value3, \"se\" = se3)\n#Because of thin barrier knock-out range, value of option is diminished. \nprint(results3)\n\n\n####### Problem 4: value 6 mo option on on 1yr & 6 mo forward price spreads ########\n\n#From Thomas Fillebeen: Schwartz one factor model forward curve function\nFT <- function(S, alpha, mu, sig, s){  #s = forward maturity, alpha = mrr, S = spot price, sig = sd(Spots)\n  eaT = exp(-alpha * s)\n  sig2a = sig * sig / (2 * alpha)\n  FT = exp(log(S) * eaT + (mu - sig2a) * (1 - eaT) + sig2a * (1 - eaT * eaT) / 2)\n  return(FT)\n}\n\n\n\n\n  \n",
    "created" : 1435374108291.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1859316260",
    "id" : "C32066CC",
    "lastKnownWriteTime" : 1435431320,
    "path" : "~/Desktop/AMATH_Summer_UW/CFRM_520/EnergyRisk/ENERGYRISK/homework_files/HW1.R",
    "project_path" : "homework_files/HW1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}